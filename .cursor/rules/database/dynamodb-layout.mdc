---
description: when needs to query
globs:
alwaysApply: false
---
# DynamoDB 資料庫布局指南

## 📊 CQRS 表結構概述

本專案實現完整的 CQRS 模式，使用兩個獨立的 DynamoDB 表分離讀寫操作：

1. **`command-records`** - Command Side (寫入端)
2. **`notification-records`** - Query Side (查詢端)

## 📝 Command Side - `command-records` 表

### 主鍵設計
- **Partition Key**: `transaction_id` (String) - 交易唯一識別碼
- **Sort Key**: `created_at` (Number) - 創建時間戳 (毫秒)

### 表屬性
- **Stream**: 啟用 DynamoDB Stream (`NEW_AND_OLD_IMAGES`)
- **計費模式**: PAY_PER_REQUEST (按需計費)
- **Stream 檢視類型**: NEW_AND_OLD_IMAGES

### 完整欄位結構
```json
{
  "transaction_id": "String",      // 交易ID (主鍵)
  "created_at": "Number",          // 時間戳 (排序鍵)
  "notification_title": "String", // 通知標題
  "notification_body": "String",  // 通知內容
  "status": "String",             // SENT | DELIVERED | FAILED
  "platform": "String",          // IOS | ANDROID | WEBPUSH
  "device_token": "String",       // 設備推播令牌
  "payload": "String",            // JSON 格式的推播內容
  "error_msg": "String",          // 錯誤訊息 (失敗時)
  "ap_id": "String",              // 來源服務識別碼
  "sns_id": "String",             // SNS 推播識別碼
  "retry_cnt": "Number",          // 重送次數
  "send_ts": "Number",            // 送出時間戳
  "delivered_ts": "Number",       // 送達時間戳
  "failed_ts": "Number"           // 失敗時間戳
}
```

**用途**: 專門處理寫入操作，觸發 Stream 事件進行異步同步

## 🔍 Query Side - `notification-records` 表

### 主鍵設計
- **Partition Key**: `transaction_id` (String) - 交易唯一識別碼

### 完整欄位結構
```json
{
  "transaction_id": "String",     // 交易ID (主鍵)
  "created_at": "Number",         // 創建時間戳
  "notification_title": "String", // 通知標題
  "notification_body": "String",  // 通知內容
  "status": "String",             // SENT | DELIVERED | FAILED
  "platform": "String",          // IOS | ANDROID | WEBPUSH
  "error_msg": "String",          // 錯誤訊息 (失敗時，可選)
  "ap_id": "String",              // 來源服務識別碼
  "sns_id": "String",             // SNS 推播識別碼
  "retry_cnt": "Number",          // 重送次數
  "send_ts": "Number",            // 送出時間戳
  "delivered_ts": "Number",       // 送達時間戳
  "failed_ts": "Number"           // 失敗時間戳
}
```

**用途**: 專門處理查詢操作，提供最佳化的讀取效能

## 🔄 資料同步機制

**流程**: `command-records` → DynamoDB Stream → [stream_processor_lambda](mdc:query-service/lambdas/stream_processor_lambda/app.py) → `notification-records`

**定義文件**:
- [LocalStack 設置](mdc:query-service/infra/localstack/setup.sh)
- [Docker 設置](mdc:query-service/infra/localstack/setup_docker.sh)
- [資料模型定義](mdc:query-service/lambdas/stream_processor_lambda/app.py)

## 🏗️ 表格建立範例

### LocalStack 環境建立指令
```bash
# Command Table (寫入側)
awslocal dynamodb create-table \
    --table-name command-records \
    --attribute-definitions \
        AttributeName=transaction_id,AttributeType=S \
        AttributeName=created_at,AttributeType=N \
    --key-schema \
        AttributeName=transaction_id,KeyType=HASH \
        AttributeName=created_at,KeyType=RANGE \
    --billing-mode PAY_PER_REQUEST \
    --stream-specification StreamEnabled=true,StreamViewType=NEW_AND_OLD_IMAGES

# Query Table (讀取側)
awslocal dynamodb create-table \
    --table-name notification-records \
    --attribute-definitions \
        AttributeName=transaction_id,AttributeType=S \
        AttributeName=status,AttributeType=S \
        AttributeName=created_at,AttributeType=N \
    --key-schema \
        AttributeName=transaction_id,KeyType=HASH \
    --global-secondary-indexes \
        IndexName=status-index,KeySchema=[{AttributeName=status,KeyType=HASH},{AttributeName=created_at,KeyType=RANGE}],Projection={ProjectionType=ALL} \
    --billing-mode PAY_PER_REQUEST
```
