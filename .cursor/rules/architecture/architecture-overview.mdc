---
description:
globs:
alwaysApply: false
---
# AWS CQRS + 六邊形架構通知系統 - 架構概覽

## 🏗️ 系統架構

本專案實現了 **CQRS (Command Query Responsibility Segregation)** 模式結合 **六邊形架構 (Hexagonal Architecture)**，提供企業級的推播通知系統。

### CQRS 架構模式

```txt
┌─────────────────┐    ┌──────────────┐    ┌─────────────────┐
│   Command Side  │───▶│  DynamoDB    │───▶│   Query Side    │
│   (Write Path)  │    │   Stream     │    │   (Read Path)   │
└─────────────────┘    └──────────────┘    └─────────────────┘
         │                      │                      │
         ▼                      ▼                      ▼
  ┌─────────────┐      ┌─────────────┐      ┌─────────────┐
  │ command-    │      │   Stream    │      │notification-│
  │ records     │      │ Processor   │      │ records     │
  │ (Write DB)  │      │  Lambda     │      │ (Read DB)   │
  └─────────────┘      └─────────────┘      └─────────────┘
```

- **Command Side**: 處理寫入操作和命令，使用 `command-records` 資料表
- **Query Side**: 最佳化的查詢操作，使用 `notification-records` 資料表
- **事件驅動同步**: DynamoDB Stream 觸發的 Lambda 函數自動同步資料

### 六邊形架構層次

**FastAPI Query Service** 採用六邊形架構：

1. **Web Layer** ([main.py](mdc:query-service/eks_handler/main.py))
   - FastAPI 路由和端點
   - 請求/回應模型驗證
   - API 文檔自動生成

2. **Application Layer**
   - 業務用例實現
   - 依賴注入管理
   - 查詢服務協調

3. **Domain Layer**
   - `NotificationRecord` 領域模型
   - `QueryResult` 查詢結果模型
   - 業務邏輯與規則

4. **Infrastructure Layer**
   - Lambda 適配器
   - External API 整合
   - 端口與適配器模式

## 🎯 核心組件

### 主要服務
- **FastAPI 服務**: [query-service/eks_handler/](mdc:query-service/eks_handler) - EKS 上運行的查詢服務
- **Lambda 函數**: [query-service/lambdas/](mdc:query-service/lambdas) - 事件處理和資料同步
- **基礎設施**: [query-service/infra/](mdc:query-service/infra) - AWS 資源配置

### 查詢類型
1. **交易查詢**: 根據 `transaction_id` 查詢推播記錄
2. **失敗查詢**: 根據 `transaction_id` 查詢失敗記錄
3. **SNS 查詢**: 根據 `sns_id` 查詢 SNS 推播記錄

## 🔧 技術堆疊

- **Python 3.12** + **Poetry** 依賴管理
- **FastAPI** + **Pydantic** Web 框架
- **AWS Lambda** + **DynamoDB** 雲端服務
- **Docker** + **LocalStack** 容器化開發
- **pytest** + **coverage** 測試框架
