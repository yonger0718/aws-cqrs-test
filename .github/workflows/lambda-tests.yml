name: Lambda Functions Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "query-service/lambdas/**"
      - "query-service/tests/test_lambdas/**"
      - "pyproject.toml"
  pull_request:
    branches: [main]
    paths:
      - "query-service/lambdas/**"
      - "query-service/tests/test_lambdas/**"

env:
  PYTHON_VERSION: "3.12"

jobs:
  lambda-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    # 添加 LocalStack 服務
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: dynamodb,lambda,s3,sns,sqs
          DEFAULT_REGION: us-east-1
          LAMBDA_EXECUTOR: docker
          DOCKER_HOST: unix:///var/run/docker.sock
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-lambda-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install --no-root
          # 安裝 awscli-local 用於 LocalStack
          pip install awscli-local

      - name: Set up test environment
        run: |
          # AWS 測試環境變數
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=test" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=test" >> $GITHUB_ENV # pragma: allowlist secret
          # LocalStack 端點
          echo "AWS_ENDPOINT_URL=http://localhost:4566" >> $GITHUB_ENV
          echo "LOCALSTACK_ENDPOINT=http://localhost:4566" >> $GITHUB_ENV

      - name: Wait for LocalStack
        run: |
          echo "等待 LocalStack 啟動..."
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'
          echo "LocalStack 已就緒"

      - name: Clean up LocalStack tables
        run: |
          echo "🧹 清理 LocalStack 中可能存在的表..."
          # 使用 aws cli 清理可能存在的表
          aws --endpoint-url=http://localhost:4566 dynamodb delete-table --table-name notification-records || echo "表不存在，跳過刪除"
          echo "LocalStack 表清理完成"
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test # pragma: allowlist secret

      # 運行 Lambda 測試但不設置嚴格的覆蓋率要求
      - name: Run Lambda tests with coverage
        run: |
          echo "🎯 Running unified Lambda tests with coverage..."
          # 分別運行不同的測試文件以避免表衝突
          echo "Running query_lambda tests..."
          poetry run python -m pytest query-service/tests/test_lambdas/test_query_lambda.py -v \
            --tb=short \
            --cov=query-service/lambdas/query_lambda \
            --cov-report=xml:coverage-query.xml \
            --no-cov-on-fail || true

          echo "Cleaning up tables before next test..."
          aws --endpoint-url=http://localhost:4566 dynamodb delete-table --table-name notification-records || true
          sleep 2

          echo "Running query_result_lambda tests..."
          poetry run python -m pytest query-service/tests/test_lambdas/test_query_result_lambda.py -v \
            --tb=short \
            --cov=query-service/lambdas/query_result_lambda \
            --cov-append \
            --cov-report=xml:coverage-query-result.xml \
            --no-cov-on-fail || true

          echo "Cleaning up tables before next test..."
          aws --endpoint-url=http://localhost:4566 dynamodb delete-table --table-name notification-records || true
          sleep 2

          echo "Running stream_processor_lambda tests..."
          poetry run python -m pytest query-service/tests/test_lambdas/test_stream_processor_lambda.py -v \
            --tb=short \
            --cov=query-service/lambdas/stream_processor_lambda \
            --cov-append \
            --cov-report=xml:coverage-stream.xml \
            --cov-report=term-missing \
            --no-cov-on-fail || true

          echo "Combining coverage reports..."
          poetry run coverage combine || true
          poetry run coverage xml -o coverage.xml || true
          poetry run coverage report || true
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test # pragma: allowlist secret
          AWS_ENDPOINT_URL: http://localhost:4566
          LOCALSTACK_ENDPOINT: http://localhost:4566

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: lambda-tests
          name: codecov-lambda
          token: ${{ secrets.CODECOV_TOKEN }} # pragma: allowlist secret
          fail_ci_if_error: false
          slug: yonger0718/aws-cqrs-test

      - name: Generate test report
        if: always()
        run: |
          echo "## 📊 Lambda Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Python Version: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- LocalStack: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Management: Poetry" >> $GITHUB_STEP_SUMMARY

  security-scan:
    runs-on: ubuntu-latest
    needs: lambda-tests
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run security scan
        run: |
          # 安裝安全掃描工具
          poetry run pip install bandit safety
          # 掃描 Lambda 代碼安全性
          poetry run bandit -r query-service/lambdas/ -f json -o bandit-report.json || true
          # 檢查依賴安全性
          poetry run safety scan --json || true
