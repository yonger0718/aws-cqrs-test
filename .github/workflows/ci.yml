name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.12"

jobs:
  # 程式碼品質檢查
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run Black formatter check
        run: poetry run black --check --line-length=100 query-service/

      - name: Run isort import checker
        run: poetry run isort --check-only --profile=black --line-length=100 query-service/

      - name: Run Flake8 linter
        run: poetry run flake8 query-service/ --max-line-length=100 --extend-ignore=E203,W503 --exclude=__pycache__,venv

      - name: Run MyPy type checker
        run: poetry run mypy query-service/ --ignore-missing-imports

      - name: Run Bandit security checker
        run: poetry run bandit -ll query-service/ --recursive --format json --output bandit-report.json || (cat bandit-report.json && exit 1)

      - name: Check YAML files
        run: |
          find . -name "*.yml" -o -name "*.yaml" | grep -v '.mypy_cache' | xargs poetry run python -c "
          import yaml, sys
          for f in sys.argv[1:]:
              try:
                  with open(f) as file:
                      yaml.safe_load(file)
                  print(f'✓ {f}')
              except Exception as e:
                  print(f'✗ {f}: {e}')
                  sys.exit(1)
          "

      - name: Check JSON files
        run: |
          find . -name "*.json" | grep -v '.mypy_cache' | head -20 | xargs poetry run python -c "
          import json, sys
          for f in sys.argv[1:]:
              try:
                  with open(f) as file:
                      json.load(file)
                  print(f'✓ {f}')
              except Exception as e:
                  print(f'✗ {f}: {e}')
                  sys.exit(1)
          "

      - name: Check TOML files
        run: |
          find . -name "*.toml" | xargs poetry run python -c "
          import tomllib, sys
          for f in sys.argv[1:]:
              try:
                  with open(f, 'rb') as file:
                      tomllib.load(file)
                  print(f'✓ {f}')
              except Exception as e:
                  print(f'✗ {f}: {e}')
                  sys.exit(1)
          " || true

      - name: Run markdownlint
        run: |
          npm install -g markdownlint-cli
          markdownlint . --config .markdownlint.json || true

      - name: Run hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: query-service/eks_handler/Dockerfile
          failure-threshold: error

      - name: Run detect-secrets
        run: |
          poetry run pip install detect-secrets
          poetry run detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins

  # 單元測試
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run unit tests with coverage
        run: |
          poetry run pytest query-service/tests/test_eks_handler.py \
            --cov=query-service/eks_handler \
            --cov-report=xml \
            --cov-report=term \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          slug: yonger0718/aws-cqrs-test

  # 整合測試
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    permissions:
      contents: read

    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: dynamodb,lambda,s3
          DEFAULT_REGION: us-east-1
          DATA_DIR: /tmp/localstack/data
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install --no-root
          pip install awscli-local

      - name: Wait for LocalStack
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

      - name: Setup LocalStack resources
        run: |
          # 建立 DynamoDB 表
          awslocal dynamodb create-table \
            --table-name command-records \
            --attribute-definitions \
              AttributeName=transaction_id,AttributeType=S \
            --key-schema \
              AttributeName=transaction_id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST

          awslocal dynamodb create-table \
            --table-name notification-records \
            --attribute-definitions \
              AttributeName=user_id,AttributeType=S \
              AttributeName=created_at,AttributeType=N \
            --key-schema \
              AttributeName=user_id,KeyType=HASH \
              AttributeName=created_at,KeyType=RANGE \
            --billing-mode PAY_PER_REQUEST

      - name: Run integration tests
        env:
          LOCALSTACK_URL: http://localhost:4566
        run: |
          poetry run pytest query-service/tests/test_integration.py \
            --cov=query-service/eks_handler \
            --cov-append \
            --cov-report=xml

      - name: Upload integration coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          flags: integration
          name: codecov-integration
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          slug: yonger0718/aws-cqrs-test

  # Docker 映像建置和推送 - 暫時停用
  # docker-build:
  #   name: Build and Push Docker Image
  #   runs-on: ubuntu-latest
  #   needs: [unit-tests, integration-tests]
  #   permissions:
  #     contents: read
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Log in to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Build and push EKS Handler image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./query-service/eks_handler
  #       push: true
  #       tags: |
  #         ${{ secrets.DOCKER_USERNAME }}/eks_handler:latest
  #         ${{ secrets.DOCKER_USERNAME }}/eks_handler:${{ github.sha }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  # 安全掃描
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [lint, integration-tests]
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run safety check
        run: |
          poetry run pip install safety
          poetry run safety scan --json || true

      - name: Run Bandit security scan
        run: |
          poetry run pip install bandit
          poetry run bandit -r query-service/ -ll --format json --output bandit-security-report.json || true

      - name: Run detect-secrets scan
        run: |
          poetry run pip install detect-secrets
          poetry run detect-secrets scan --baseline .secrets.baseline --force-use-all-plugins

  # 部署 (僅在主分支) - 暫時停用
  # deploy:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [docker-build, security-scan]
  #   permissions:
  #     contents: read
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-east-1

  #   - name: Deploy to EKS
  #     run: |
  #       echo "Deploying to EKS..."
  #       # 這裡添加實際的部署命令
  #       # kubectl apply -f k8s/
  #       # 或使用 Helm
  #       # helm upgrade --install query-service ./helm-chart

  #   - name: Send deployment notification
  #     if: always()
  #     uses: 8398a7/action-slack@v3
  #     with:
  #       status: ${{ job.status }}
  #       text: 'Deployment ${{ job.status }} for commit ${{ github.sha }}'
  #       webhook_url: ${{ secrets.SLACK_WEBHOOK }}
  #     env:
  #       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
