name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  # 程式碼品質檢查
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run Black formatter check
      run: black --check query-service/

    - name: Run isort import checker
      run: isort --check-only query-service/

    - name: Run Flake8 linter
      run: flake8 query-service/ --max-line-length=100 --exclude=__pycache__,venv

    - name: Run MyPy type checker
      run: mypy query-service/ --ignore-missing-imports || true

  # 單元測試
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r query-service/requirements.txt
        pip install -r query-service/tests/requirements-test.txt

    - name: Run unit tests with coverage
      run: |
        cd query-service
        pytest tests/test_eks_handler.py -v --cov=eks_handler --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./query-service/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 整合測試
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: dynamodb,lambda,s3
          DEFAULT_REGION: us-east-1
          DATA_DIR: /tmp/localstack/data
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r query-service/requirements.txt
        pip install -r query-service/tests/requirements-test.txt
        pip install awscli-local

    - name: Wait for LocalStack
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

    - name: Setup LocalStack resources
      run: |
        # 建立 DynamoDB 表
        awslocal dynamodb create-table \
          --table-name command-records \
          --attribute-definitions \
            AttributeName=transaction_id,AttributeType=S \
          --key-schema \
            AttributeName=transaction_id,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST

        awslocal dynamodb create-table \
          --table-name notification-records \
          --attribute-definitions \
            AttributeName=user_id,AttributeType=S \
            AttributeName=notification_id,AttributeType=S \
          --key-schema \
            AttributeName=user_id,KeyType=HASH \
            AttributeName=notification_id,KeyType=RANGE \
          --billing-mode PAY_PER_REQUEST

    - name: Run integration tests
      env:
        LOCALSTACK_URL: http://localhost:4566
      run: |
        cd query-service
        pytest tests/test_integration.py -v -s

  # Docker 映像建置和推送
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push EKS Handler image
      uses: docker/build-push-action@v5
      with:
        context: ./query-service/eks-handler
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/eks-handler:latest
          ${{ secrets.DOCKER_USERNAME }}/eks-handler:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全掃描
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run safety check
      run: |
        pip install safety
        safety check -r query-service/requirements.txt --json || true

  # 部署 (僅在主分支)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to EKS
      run: |
        echo "Deploying to EKS..."
        # 這裡添加實際的部署命令
        # kubectl apply -f k8s/
        # 或使用 Helm
        # helm upgrade --install query-service ./helm-chart

    - name: Send deployment notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Deployment ${{ job.status }} for commit ${{ github.sha }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
